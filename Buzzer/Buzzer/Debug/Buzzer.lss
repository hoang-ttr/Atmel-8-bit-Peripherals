
Buzzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000140  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000001b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000762  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000667  00000000  00000000  000009d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000384  00000000  00000000  00001039  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  000013c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b0  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000fe  00000000  00000000  000017e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000018e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  74:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ButtonPressed>:

#define numberOfButtons 2
#define holdtime 100

uint8_t ButtonPressed(uint8_t pinOfButton, uint8_t portBit)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	1f 92       	push	r1
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t	pressed=0,
					Pressed_Confidence_Level,		//Measure button press confidence
					Released_Confidence_Level;		//Measure button release confidence

	if (bit_is_clear(pinOfButton, portBit))
  88:	89 81       	ldd	r24, Y+1	; 0x01
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	02 c0       	rjmp	.+4      	; 0x92 <ButtonPressed+0x16>
  8e:	95 95       	asr	r25
  90:	87 95       	ror	r24
  92:	6a 95       	dec	r22
  94:	e2 f7       	brpl	.-8      	; 0x8e <ButtonPressed+0x12>
  96:	80 fd       	sbrc	r24, 0
  98:	15 c0       	rjmp	.+42     	; 0xc4 <ButtonPressed+0x48>
	{
		Pressed_Confidence_Level++;					//Increase Pressed Confidence
  9a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Pressed_Confidence_Level.1736>
  9e:	8f 5f       	subi	r24, 0xFF	; 255
  a0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Pressed_Confidence_Level.1736>
		Released_Confidence_Level = 0;				//Reset released button confidence since there is a button press
  a4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Released_Confidence_Level.1737>
		if (Pressed_Confidence_Level > holdtime)	//Indicator of good button press
  a8:	85 36       	cpi	r24, 0x65	; 101
  aa:	f8 f0       	brcs	.+62     	; 0xea <ButtonPressed+0x6e>
		{
			if (pressed == 0)
  ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  b0:	81 11       	cpse	r24, r1
  b2:	04 c0       	rjmp	.+8      	; 0xbc <ButtonPressed+0x40>
			{
				pressed = 1;
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
				return 1;
  ba:	1c c0       	rjmp	.+56     	; 0xf4 <ButtonPressed+0x78>
			}
			Pressed_Confidence_Level = 0;			//Zero it so a new pressed condition can be evaluated
  bc:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Pressed_Confidence_Level.1736>
				pressed = 0;
				Released_Confidence_Level = 0;
			}
		}
	}
	return 0;
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	18 c0       	rjmp	.+48     	; 0xf4 <ButtonPressed+0x78>
			Pressed_Confidence_Level = 0;			//Zero it so a new pressed condition can be evaluated
		}
	}
	else
	{
		Released_Confidence_Level++;				//This works just like the pressed
  c4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Released_Confidence_Level.1737>
  c8:	8f 5f       	subi	r24, 0xFF	; 255
  ca:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Released_Confidence_Level.1737>
		Pressed_Confidence_Level = 0;				//Reset pressed button confidence since the button is released
  ce:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Pressed_Confidence_Level.1736>
		if (Released_Confidence_Level > holdtime)
  d2:	85 36       	cpi	r24, 0x65	; 101
  d4:	60 f0       	brcs	.+24     	; 0xee <ButtonPressed+0x72>
		{
			if (pressed == 1)
  d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	51 f4       	brne	.+20     	; 0xf2 <ButtonPressed+0x76>
			{
				pressed = 0;
  de:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
				Released_Confidence_Level = 0;
  e2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Released_Confidence_Level.1737>
			}
		}
	}
	return 0;
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	05 c0       	rjmp	.+10     	; 0xf4 <ButtonPressed+0x78>
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	03 c0       	rjmp	.+6      	; 0xf4 <ButtonPressed+0x78>
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <ButtonPressed+0x78>
  f2:	80 e0       	ldi	r24, 0x00	; 0
}
  f4:	0f 90       	pop	r0
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <main>:
#include "src/Buzzer.h"
#include "src/Button.h"

int main(void)
{
	Buzzer_Init();
  fc:	0e 94 8b 00 	call	0x116	; 0x116 <Buzzer_Init>
	DDRB &= ~(1<<7);
 100:	bf 98       	cbi	0x17, 7	; 23
	PORTB |= (1<<7);
 102:	c7 9a       	sbi	0x18, 7	; 24

	while (1)
    {
		if (ButtonPressed(PINB, 7))
 104:	86 b3       	in	r24, 0x16	; 22
 106:	67 e0       	ldi	r22, 0x07	; 7
 108:	0e 94 3e 00 	call	0x7c	; 0x7c <ButtonPressed>
 10c:	88 23       	and	r24, r24
 10e:	d1 f3       	breq	.-12     	; 0x104 <main+0x8>
		BuzzerRun();
 110:	0e 94 8f 00 	call	0x11e	; 0x11e <BuzzerRun>
 114:	f7 cf       	rjmp	.-18     	; 0x104 <main+0x8>

00000116 <Buzzer_Init>:
#include <util/delay.h>
#include "Buzzer.h"

void Buzzer_Init(void)
{
	Buzzer_DDR |=(1<<Buzzer_Pin); //Buzzer pin0 as OUTPUT
 116:	b8 9a       	sbi	0x17, 0	; 23
	Buzzer = 1; //Buzzer active LOW
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	88 bb       	out	0x18, r24	; 24
 11c:	08 95       	ret

0000011e <BuzzerRun>:
}
void BuzzerRun(void)
{
 11e:	9a ef       	ldi	r25, 0xFA	; 250
	double period;

	period = 1000 / (2*freq);	// 1000ms, ON duty is 50%
	for(i=0; i<freq; i++)
	{
		Buzzer ^= (1<<Buzzer_Pin);
 120:	21 e0       	ldi	r18, 0x01	; 1
 122:	88 b3       	in	r24, 0x18	; 24
 124:	82 27       	eor	r24, r18
 126:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	ef e3       	ldi	r30, 0x3F	; 63
 12a:	ff e1       	ldi	r31, 0x1F	; 31
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <BuzzerRun+0xe>
 130:	00 c0       	rjmp	.+0      	; 0x132 <BuzzerRun+0x14>
 132:	00 00       	nop
 134:	91 50       	subi	r25, 0x01	; 1
{
	uint8_t i;
	double period;

	period = 1000 / (2*freq);	// 1000ms, ON duty is 50%
	for(i=0; i<freq; i++)
 136:	a9 f7       	brne	.-22     	; 0x122 <BuzzerRun+0x4>
	{
		Buzzer ^= (1<<Buzzer_Pin);
		_delay_ms(period);
	}
	Buzzer |= (1<<Buzzer_Pin);
 138:	c0 9a       	sbi	0x18, 0	; 24
 13a:	08 95       	ret

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
