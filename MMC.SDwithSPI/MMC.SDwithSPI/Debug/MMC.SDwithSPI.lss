
MMC.SDwithSPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000066c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b0  00800060  0000066c  00000700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000166  00800110  00800110  000007b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001787  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f9  00000000  00000000  000020b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a9e  00000000  00000000  00002aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  0000354c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000531  00000000  00000000  000037a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c54  00000000  00000000  00003cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000492d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e6       	ldi	r30, 0x6C	; 108
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 31       	cpi	r26, 0x10	; 16
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a0 e1       	ldi	r26, 0x10	; 16
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 34 03 	jmp	0x668	; 0x668 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
static char buffing[Block_Length];

int main(void)
{
	char Result;
    DDRC=0xFF;		//For 7segs to check for stages in simulation
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	84 bb       	out	0x14, r24	; 20
	PORTC=0x00;
  96:	15 ba       	out	0x15, r1	; 21

	Lcd4_Ini();
  98:	0e 94 80 01 	call	0x300	; 0x300 <Lcd4_Ini>
	Lcd4_Clear();
  9c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Lcd4_Clear>
	Lcd4_SetString("Init. MMC...");
  a0:	80 e6       	ldi	r24, 0x60	; 96
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 bc 01 	call	0x378	; 0x378 <Lcd4_SetString>
	UARTIni(0,1);
  a8:	61 e0       	ldi	r22, 0x01	; 1
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	0e 94 dd 02 	call	0x5ba	; 0x5ba <UARTIni>
	Result=Card_Ini();
  b0:	0e 94 14 02 	call	0x428	; 0x428 <Card_Ini>
	PORTC|=(1<<0);
  b4:	a8 9a       	sbi	0x15, 0	; 21
	if(Result!=0)	goto Finish;
  b6:	81 11       	cpse	r24, r1
  b8:	ae c0       	rjmp	.+348    	; 0x216 <main+0x184>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	83 ed       	ldi	r24, 0xD3	; 211
  be:	90 e3       	ldi	r25, 0x30	; 48
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x2e>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x38>
  ca:	00 00       	nop
	_delay_ms(1000);
	//----------WRITING INTO THE CARD----------//
	Lcd4_Clear();
  cc:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Lcd4_Clear>
	Lcd4_SetString("Writing 1st...");
  d0:	8d e6       	ldi	r24, 0x6D	; 109
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 bc 01 	call	0x378	; 0x378 <Lcd4_SetString>
	char *testStr = "This is a demostration for the use of MMC.SD Card\n";
	Result=Card_Write(1,testStr);
  d8:	4c e7       	ldi	r20, 0x7C	; 124
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 54 02 	call	0x4a8	; 0x4a8 <Card_Write>
	PORTC|=(1<<1);
  e8:	a9 9a       	sbi	0x15, 1	; 21
	if(Result!=0) goto Finish;
  ea:	81 11       	cpse	r24, r1
  ec:	94 c0       	rjmp	.+296    	; 0x216 <main+0x184>
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	83 ed       	ldi	r24, 0xD3	; 211
  f2:	90 e3       	ldi	r25, 0x30	; 48
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x62>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x6c>
  fe:	00 00       	nop
	_delay_ms(1000);

	Lcd4_Clear();
 100:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Lcd4_Clear>
	Lcd4_SetString("Writing 2nd...");
 104:	8f ea       	ldi	r24, 0xAF	; 175
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 bc 01 	call	0x378	; 0x378 <Lcd4_SetString>
	testStr = "Welcome to EE\n";
	Result=Card_Write(2,testStr);
 10c:	4e eb       	ldi	r20, 0xBE	; 190
 10e:	50 e0       	ldi	r21, 0x00	; 0
 110:	62 e0       	ldi	r22, 0x02	; 2
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 54 02 	call	0x4a8	; 0x4a8 <Card_Write>
	PORTC|=(1<<2);
 11c:	aa 9a       	sbi	0x15, 2	; 21
	if(Result!=0) goto Finish;
 11e:	81 11       	cpse	r24, r1
 120:	7a c0       	rjmp	.+244    	; 0x216 <main+0x184>
 122:	2f ef       	ldi	r18, 0xFF	; 255
 124:	83 ed       	ldi	r24, 0xD3	; 211
 126:	90 e3       	ldi	r25, 0x30	; 48
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	90 40       	sbci	r25, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0x96>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0xa0>
 132:	00 00       	nop
	_delay_ms(1000);

	Lcd4_Clear();
 134:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Lcd4_Clear>
	Lcd4_SetString("Writing 3rd...");
 138:	8d ec       	ldi	r24, 0xCD	; 205
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 bc 01 	call	0x378	; 0x378 <Lcd4_SetString>
	testStr = "Demo for MMC.SD";
	Result=Card_Write(3,testStr);
 140:	4c ed       	ldi	r20, 0xDC	; 220
 142:	50 e0       	ldi	r21, 0x00	; 0
 144:	63 e0       	ldi	r22, 0x03	; 3
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <Card_Write>
	PORTC|=(1<<3);
 150:	ab 9a       	sbi	0x15, 3	; 21
	if(Result!=0) goto Finish;
 152:	81 11       	cpse	r24, r1
 154:	60 c0       	rjmp	.+192    	; 0x216 <main+0x184>
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	83 ed       	ldi	r24, 0xD3	; 211
 15a:	90 e3       	ldi	r25, 0x30	; 48
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0xca>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0xd4>
 166:	00 00       	nop
	_delay_ms(1000);

	//----------READIND INTO THE CARD----------//
	Lcd4_Clear();
 168:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Lcd4_Clear>
	Lcd4_SetString("Reading 1st...");
 16c:	8c ee       	ldi	r24, 0xEC	; 236
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 bc 01 	call	0x378	; 0x378 <Lcd4_SetString>
	Result=Card_Read(1,buffing);
 174:	40 e1       	ldi	r20, 0x10	; 16
 176:	51 e0       	ldi	r21, 0x01	; 1
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 9a 02 	call	0x534	; 0x534 <Card_Read>
	PORTC|=(1<<4);
 184:	ac 9a       	sbi	0x15, 4	; 21
	UART_SendString(buffing);
 186:	80 e1       	ldi	r24, 0x10	; 16
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	0e 94 00 03 	call	0x600	; 0x600 <UART_SendString>
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	83 ed       	ldi	r24, 0xD3	; 211
 192:	90 e3       	ldi	r25, 0x30	; 48
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0x102>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x10c>
 19e:	00 00       	nop
	_delay_ms(1000);

	Lcd4_Clear();
 1a0:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Lcd4_Clear>
	Result=Card_Read(2,buffing);
 1a4:	40 e1       	ldi	r20, 0x10	; 16
 1a6:	51 e0       	ldi	r21, 0x01	; 1
 1a8:	62 e0       	ldi	r22, 0x02	; 2
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 9a 02 	call	0x534	; 0x534 <Card_Read>
	PORTC|=(1<<5);
 1b4:	ad 9a       	sbi	0x15, 5	; 21
	UART_SendString(buffing);
 1b6:	80 e1       	ldi	r24, 0x10	; 16
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 00 03 	call	0x600	; 0x600 <UART_SendString>
	Lcd4_SetString(buffing);
 1be:	80 e1       	ldi	r24, 0x10	; 16
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	0e 94 bc 01 	call	0x378	; 0x378 <Lcd4_SetString>
 1c6:	2f ef       	ldi	r18, 0xFF	; 255
 1c8:	83 ed       	ldi	r24, 0xD3	; 211
 1ca:	90 e3       	ldi	r25, 0x30	; 48
 1cc:	21 50       	subi	r18, 0x01	; 1
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	90 40       	sbci	r25, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <main+0x13a>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <main+0x144>
 1d6:	00 00       	nop
	_delay_ms(1000);

	Result=Card_Read(3,buffing);
 1d8:	40 e1       	ldi	r20, 0x10	; 16
 1da:	51 e0       	ldi	r21, 0x01	; 1
 1dc:	63 e0       	ldi	r22, 0x03	; 3
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 9a 02 	call	0x534	; 0x534 <Card_Read>
	PORTC|=(1<<6);
 1e8:	ae 9a       	sbi	0x15, 6	; 21
	UART_SendString(buffing);
 1ea:	80 e1       	ldi	r24, 0x10	; 16
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	0e 94 00 03 	call	0x600	; 0x600 <UART_SendString>
	Lcd4_Cursor(2,1);
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <Lcd4_Cursor>
	Lcd4_SetString(buffing);
 1fa:	80 e1       	ldi	r24, 0x10	; 16
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	0e 94 bc 01 	call	0x378	; 0x378 <Lcd4_SetString>
 202:	2f ef       	ldi	r18, 0xFF	; 255
 204:	83 ed       	ldi	r24, 0xD3	; 211
 206:	90 e3       	ldi	r25, 0x30	; 48
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	80 40       	sbci	r24, 0x00	; 0
 20c:	90 40       	sbci	r25, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <main+0x176>
 210:	00 c0       	rjmp	.+0      	; 0x212 <main+0x180>
 212:	00 00       	nop
 214:	06 c0       	rjmp	.+12     	; 0x222 <main+0x190>
	_delay_ms(1000);
	goto Succes;
Finish:
	Lcd4_Clear();
 216:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Lcd4_Clear>
	Lcd4_SetString("Failed!");
 21a:	8b ef       	ldi	r24, 0xFB	; 251
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 bc 01 	call	0x378	; 0x378 <Lcd4_SetString>
	//PORTC |= (Result<<4);*/
Succes:
	Lcd4_Clear();
 222:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Lcd4_Clear>
	Lcd4_SetString("Successful!");
 226:	83 e0       	ldi	r24, 0x03	; 3
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	0e 94 bc 01 	call	0x378	; 0x378 <Lcd4_SetString>
 22e:	ff cf       	rjmp	.-2      	; 0x22e <main+0x19c>

00000230 <Lcd4_Write_Instruction>:

#include "lcd4bit.h"

void Lcd4_Write_Instruction()
{
	LCD_DATA &= ~RS;
 230:	d8 98       	cbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 232:	87 ec       	ldi	r24, 0xC7	; 199
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <Lcd4_Write_Instruction+0x6>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <Lcd4_Write_Instruction+0xc>
 23c:	00 00       	nop
	_delay_us(delay_time);
	LCD_DATA &= ~RW;
 23e:	d9 98       	cbi	0x1b, 1	; 27
 240:	87 ec       	ldi	r24, 0xC7	; 199
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <Lcd4_Write_Instruction+0x14>
 248:	00 c0       	rjmp	.+0      	; 0x24a <Lcd4_Write_Instruction+0x1a>
 24a:	00 00       	nop
 24c:	08 95       	ret

0000024e <Lcd4_Write_Data>:
	_delay_us(delay_time);
}
void Lcd4_Write_Data()
{
	LCD_DATA |= RS;
 24e:	d8 9a       	sbi	0x1b, 0	; 27
 250:	87 ec       	ldi	r24, 0xC7	; 199
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <Lcd4_Write_Data+0x6>
 258:	00 c0       	rjmp	.+0      	; 0x25a <Lcd4_Write_Data+0xc>
 25a:	00 00       	nop
	_delay_us(delay_time);
	LCD_DATA &= ~RW;
 25c:	d9 98       	cbi	0x1b, 1	; 27
 25e:	87 ec       	ldi	r24, 0xC7	; 199
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <Lcd4_Write_Data+0x14>
 266:	00 c0       	rjmp	.+0      	; 0x268 <Lcd4_Write_Data+0x1a>
 268:	00 00       	nop
 26a:	08 95       	ret

0000026c <Lcd4_Execute>:
	_delay_us(delay_time);
}
void Lcd4_Execute(uint8_t data)					//Load data to the LCD
{
	if(data & 1) LCD_DATA|=(1<<4);	//1 = 0b00000001
 26c:	80 ff       	sbrs	r24, 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <Lcd4_Execute+0x8>
 270:	dc 9a       	sbi	0x1b, 4	; 27
 272:	01 c0       	rjmp	.+2      	; 0x276 <Lcd4_Execute+0xa>
	else LCD_DATA&=~(1<<4);
 274:	dc 98       	cbi	0x1b, 4	; 27
	if(data & 2) LCD_DATA|=(1<<5);	//1 = 0b00000010
 276:	81 ff       	sbrs	r24, 1
 278:	02 c0       	rjmp	.+4      	; 0x27e <Lcd4_Execute+0x12>
 27a:	dd 9a       	sbi	0x1b, 5	; 27
 27c:	01 c0       	rjmp	.+2      	; 0x280 <Lcd4_Execute+0x14>
	else LCD_DATA&=~(1<<5);
 27e:	dd 98       	cbi	0x1b, 5	; 27
	if(data & 4) LCD_DATA|=(1<<6);	//1 = 0b00000100
 280:	82 ff       	sbrs	r24, 2
 282:	02 c0       	rjmp	.+4      	; 0x288 <Lcd4_Execute+0x1c>
 284:	de 9a       	sbi	0x1b, 6	; 27
 286:	01 c0       	rjmp	.+2      	; 0x28a <Lcd4_Execute+0x1e>
	else LCD_DATA&=~(1<<6);
 288:	de 98       	cbi	0x1b, 6	; 27
	if(data & 8) LCD_DATA|=(1<<7);	//1 = 0b00001000
 28a:	83 ff       	sbrs	r24, 3
 28c:	02 c0       	rjmp	.+4      	; 0x292 <Lcd4_Execute+0x26>
 28e:	df 9a       	sbi	0x1b, 7	; 27
 290:	01 c0       	rjmp	.+2      	; 0x294 <Lcd4_Execute+0x28>
	else LCD_DATA&=~(1<<7);
 292:	df 98       	cbi	0x1b, 7	; 27
	
	LCD_DATA |= E;	//Execute instruction
 294:	da 9a       	sbi	0x1b, 2	; 27
 296:	87 ec       	ldi	r24, 0xC7	; 199
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <Lcd4_Execute+0x2e>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <Lcd4_Execute+0x34>
 2a0:	00 00       	nop
	_delay_us(delay_time);
	LCD_DATA &= ~E;
 2a2:	da 98       	cbi	0x1b, 2	; 27
 2a4:	87 ec       	ldi	r24, 0xC7	; 199
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <Lcd4_Execute+0x3c>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <Lcd4_Execute+0x42>
 2ae:	00 00       	nop
 2b0:	08 95       	ret

000002b2 <Lcd4_Cmd>:
	_delay_us(delay_time);
	
}
void Lcd4_Cmd(uint8_t cmd)						//Send a command
{
 2b2:	cf 93       	push	r28
 2b4:	c8 2f       	mov	r28, r24
	Lcd4_Write_Instruction();
 2b6:	0e 94 18 01 	call	0x230	; 0x230 <Lcd4_Write_Instruction>
	Lcd4_Execute(cmd>>4);
 2ba:	8c 2f       	mov	r24, r28
 2bc:	82 95       	swap	r24
 2be:	8f 70       	andi	r24, 0x0F	; 15
 2c0:	0e 94 36 01 	call	0x26c	; 0x26c <Lcd4_Execute>
	Lcd4_Execute(cmd&0x0F);
 2c4:	8c 2f       	mov	r24, r28
 2c6:	8f 70       	andi	r24, 0x0F	; 15
 2c8:	0e 94 36 01 	call	0x26c	; 0x26c <Lcd4_Execute>
}
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <Lcd4_Clear>:

//----------Main functions for use----------//
void Lcd4_Clear()								//Clear screen
{
	Lcd4_Cmd(1);
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Lcd4_Cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d6:	8f e3       	ldi	r24, 0x3F	; 63
 2d8:	9f e1       	ldi	r25, 0x1F	; 31
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <Lcd4_Clear+0xa>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <Lcd4_Clear+0x10>
 2e0:	00 00       	nop
 2e2:	08 95       	ret

000002e4 <Lcd4_Cursor>:
	_delay_ms(2);
}
void Lcd4_Cursor(uint8_t row, uint8_t column)	//Set DDRAM(cursor) address --- 0b1(ADD6:0)
{
	char temp;
	if(row == 1)
 2e4:	81 30       	cpi	r24, 0x01	; 1
 2e6:	29 f4       	brne	.+10     	; 0x2f2 <Lcd4_Cursor+0xe>
	{
		temp = 0b10000000 + (column-1);
		Lcd4_Cmd(temp);
 2e8:	8f e7       	ldi	r24, 0x7F	; 127
 2ea:	86 0f       	add	r24, r22
 2ec:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Lcd4_Cmd>
 2f0:	08 95       	ret
	}
	else if(row == 2)
 2f2:	82 30       	cpi	r24, 0x02	; 2
 2f4:	21 f4       	brne	.+8      	; 0x2fe <Lcd4_Cursor+0x1a>
	{
		temp = 0b11000000 + (column-1);
		Lcd4_Cmd(temp);
 2f6:	8f eb       	ldi	r24, 0xBF	; 191
 2f8:	86 0f       	add	r24, r22
 2fa:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Lcd4_Cmd>
 2fe:	08 95       	ret

00000300 <Lcd4_Ini>:
	}
}
void Lcd4_Ini(void)								//Initialize LCD
{
	LCD_DDR = 0xFF;
 300:	8f ef       	ldi	r24, 0xFF	; 255
 302:	8a bb       	out	0x1a, r24	; 26
 304:	2f ef       	ldi	r18, 0xFF	; 255
 306:	89 ef       	ldi	r24, 0xF9	; 249
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	21 50       	subi	r18, 0x01	; 1
 30c:	80 40       	sbci	r24, 0x00	; 0
 30e:	90 40       	sbci	r25, 0x00	; 0
 310:	e1 f7       	brne	.-8      	; 0x30a <Lcd4_Ini+0xa>
 312:	00 c0       	rjmp	.+0      	; 0x314 <Lcd4_Ini+0x14>
 314:	00 00       	nop
	//----------Reset process from data sheet----------//
	_delay_ms(20);	//Wait for more than 15ms after VCC=4.5V
	Lcd4_Cmd(0x03);
 316:	83 e0       	ldi	r24, 0x03	; 3
 318:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Lcd4_Cmd>
 31c:	8f e1       	ldi	r24, 0x1F	; 31
 31e:	9e e4       	ldi	r25, 0x4E	; 78
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <Lcd4_Ini+0x20>
 324:	00 c0       	rjmp	.+0      	; 0x326 <Lcd4_Ini+0x26>
 326:	00 00       	nop
	_delay_ms(5);	//Wait for more than 4.1ms
	Lcd4_Cmd(0x03);
 328:	83 e0       	ldi	r24, 0x03	; 3
 32a:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Lcd4_Cmd>
 32e:	8f e9       	ldi	r24, 0x9F	; 159
 330:	9f e0       	ldi	r25, 0x0F	; 15
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <Lcd4_Ini+0x32>
 336:	00 c0       	rjmp	.+0      	; 0x338 <Lcd4_Ini+0x38>
 338:	00 00       	nop
	_delay_ms(1);	//Wait for more than 100us
	Lcd4_Cmd(0x03);
 33a:	83 e0       	ldi	r24, 0x03	; 3
 33c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Lcd4_Cmd>
	//--------------------//
	Lcd4_Cmd(0x02);	//Function set: 4bit
 340:	82 e0       	ldi	r24, 0x02	; 2
 342:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Lcd4_Cmd>
	Lcd4_Cmd(0x28);	//Function set: 4bit, 2 lines, 5x8 font		---	0b001DNF** (D:data length,N:no. of line,F:font)
 346:	88 e2       	ldi	r24, 0x28	; 40
 348:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C); //Display control: display ON	--- 0b00001DCB (D:display,C:cursor,B:blinking)
 34c:	8c e0       	ldi	r24, 0x0C	; 12
 34e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Lcd4_Cmd>
	Lcd4_Cmd(0x06); //Entry mode set: increment, no accompany	--- 0b000001IS (I:increment/decrement,S:acc. display shift)
 352:	86 e0       	ldi	r24, 0x06	; 6
 354:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Lcd4_Cmd>
 358:	08 95       	ret

0000035a <Lcd4_SetChar>:
}
void Lcd4_SetChar(char character)				//Send a single character
{
 35a:	cf 93       	push	r28
 35c:	c8 2f       	mov	r28, r24
	Lcd4_Write_Data();
 35e:	0e 94 27 01 	call	0x24e	; 0x24e <Lcd4_Write_Data>
	
	Lcd4_Execute(character>>4); //Data transfer
 362:	8c 2f       	mov	r24, r28
 364:	82 95       	swap	r24
 366:	8f 70       	andi	r24, 0x0F	; 15
 368:	0e 94 36 01 	call	0x26c	; 0x26c <Lcd4_Execute>
	Lcd4_Execute(character&0x0F);
 36c:	8c 2f       	mov	r24, r28
 36e:	8f 70       	andi	r24, 0x0F	; 15
 370:	0e 94 36 01 	call	0x26c	; 0x26c <Lcd4_Execute>
}
 374:	cf 91       	pop	r28
 376:	08 95       	ret

00000378 <Lcd4_SetString>:
void Lcd4_SetString(char *pStr)					//Send a string
{
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
 37c:	ec 01       	movw	r28, r24
	while(*pStr>0) //Whenever pointer gets to the end, *pStr = 0
 37e:	88 81       	ld	r24, Y
 380:	88 23       	and	r24, r24
 382:	31 f0       	breq	.+12     	; 0x390 <Lcd4_SetString+0x18>
 384:	21 96       	adiw	r28, 0x01	; 1
	Lcd4_SetChar(*pStr++); //Send individual char and increase pointer address
 386:	0e 94 ad 01 	call	0x35a	; 0x35a <Lcd4_SetChar>
	Lcd4_Execute(character>>4); //Data transfer
	Lcd4_Execute(character&0x0F);
}
void Lcd4_SetString(char *pStr)					//Send a string
{
	while(*pStr>0) //Whenever pointer gets to the end, *pStr = 0
 38a:	89 91       	ld	r24, Y+
 38c:	81 11       	cpse	r24, r1
 38e:	fb cf       	rjmp	.-10     	; 0x386 <Lcd4_SetString+0xe>
	Lcd4_SetChar(*pStr++); //Send individual char and increase pointer address
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	08 95       	ret

00000396 <SPI_MasterIni>:

char Card_Status=0; //Busy flag for MMC/SD

void SPI_MasterIni(void)								//Initialize SPI for Master AVR
{
	SPI_DDR |= (1<<SCK)|(1<<MOSI)|(1<<SS);	//SCK, MOSI, SS as OUTPUT
 396:	87 b3       	in	r24, 0x17	; 23
 398:	80 6b       	ori	r24, 0xB0	; 176
 39a:	87 bb       	out	0x17, r24	; 23
	SPI_DDR &= ~(1<<MISO);					//MISO as INPUT
 39c:	be 98       	cbi	0x17, 6	; 23
	SPCR |= (1<<SPIE)|(1<<SPE)|(1<<MSTR);	//Interrupt enable, SPI enable, Master mode, MSB first, CPOL=0, CPHA=0
 39e:	8d b1       	in	r24, 0x0d	; 13
 3a0:	80 6d       	ori	r24, 0xD0	; 208
 3a2:	8d b9       	out	0x0d, r24	; 13
 3a4:	08 95       	ret

000003a6 <SPI_SendByte>:
}

void SPI_SendByte(uint8_t data)						//Sent byte to slave
{
	SPDR=data;
 3a6:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){;}	//Loop until SPIF is set - The process is complete
 3a8:	77 9b       	sbis	0x0e, 7	; 14
 3aa:	fe cf       	rjmp	.-4      	; 0x3a8 <SPI_SendByte+0x2>
}
 3ac:	08 95       	ret

000003ae <SPI_ReadByte>:

uint8_t SPI_ReadByte(void)								//Read byte from slave
{
	uint8_t data;

	SPDR=0xFF;							//dummy data
 3ae:	8f ef       	ldi	r24, 0xFF	; 255
 3b0:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){;}	//Loop until SPIF is set - The process is complete
 3b2:	77 9b       	sbis	0x0e, 7	; 14
 3b4:	fe cf       	rjmp	.-4      	; 0x3b2 <SPI_ReadByte+0x4>
	data=SPDR;
 3b6:	8f b1       	in	r24, 0x0f	; 15
	return data;
}
 3b8:	08 95       	ret

000003ba <Card_Respond>:

uint8_t Card_Respond(uint8_t Respond)				//Acknowledgment from MMC/SD
{
 3ba:	1f 93       	push	r17
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	18 2f       	mov	r17, r24
	int timeout=0x0FFF;
	uint8_t Incomming;					//Respond from the card

	while((timeout--)>0)				//count down the time
 3c2:	ce ef       	ldi	r28, 0xFE	; 254
 3c4:	df e0       	ldi	r29, 0x0F	; 15
	{
		Incomming=SPI_ReadByte();
 3c6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <SPI_ReadByte>
		if(Incomming==Respond)	break;
 3ca:	81 17       	cp	r24, r17
 3cc:	11 f0       	breq	.+4      	; 0x3d2 <Card_Respond+0x18>
uint8_t Card_Respond(uint8_t Respond)				//Acknowledgment from MMC/SD
{
	int timeout=0x0FFF;
	uint8_t Incomming;					//Respond from the card

	while((timeout--)>0)				//count down the time
 3ce:	21 97       	sbiw	r28, 0x01	; 1
 3d0:	d0 f7       	brcc	.-12     	; 0x3c6 <Card_Respond+0xc>
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	cd 2b       	or	r28, r29
 3d6:	09 f4       	brne	.+2      	; 0x3da <Card_Respond+0x20>
 3d8:	80 e0       	ldi	r24, 0x00	; 0
		Incomming=SPI_ReadByte();
		if(Incomming==Respond)	break;
	}
	if(timeout==0) return 0;			//If timeout
	else return 1;						//If the card responds
}
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	1f 91       	pop	r17
 3e0:	08 95       	ret

000003e2 <Card_Cmd>:

void Card_Cmd(uint8_t command, uint32_t argument, uint8_t crc)	//Send command to card
{
 3e2:	ff 92       	push	r15
 3e4:	0f 93       	push	r16
 3e6:	1f 93       	push	r17
 3e8:	cf 93       	push	r28
 3ea:	df 93       	push	r29
 3ec:	d4 2f       	mov	r29, r20
 3ee:	15 2f       	mov	r17, r21
 3f0:	06 2f       	mov	r16, r22
 3f2:	f7 2e       	mov	r15, r23
 3f4:	c2 2f       	mov	r28, r18
	SPI_PORT &= ~(1<<SS);					//Wake up the card
 3f6:	c4 98       	cbi	0x18, 4	; 24

	SPI_SendByte(command|0b01000000);		//Start bit "1" + Transmission bit "0" + 6 Command bits
 3f8:	80 64       	ori	r24, 0x40	; 64
 3fa:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SPI_SendByte>

	SPI_SendByte(argument>>24);	//Sending 32-bit argument as 4 8-bit package
 3fe:	8f 2d       	mov	r24, r15
 400:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SPI_SendByte>
	SPI_SendByte(argument>>16);
 404:	80 2f       	mov	r24, r16
 406:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SPI_SendByte>
	SPI_SendByte(argument>>8);
 40a:	81 2f       	mov	r24, r17
 40c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SPI_SendByte>
	SPI_SendByte(argument);
 410:	8d 2f       	mov	r24, r29
 412:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SPI_SendByte>

	SPI_SendByte(crc);						//CRC7 + Stop bit "1"
 416:	8c 2f       	mov	r24, r28
 418:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SPI_SendByte>
}
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	1f 91       	pop	r17
 422:	0f 91       	pop	r16
 424:	ff 90       	pop	r15
 426:	08 95       	ret

00000428 <Card_Ini>:

uint8_t Card_Ini(void)										//Initialize interface with MMC/SD
{
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
	uint16_t i;
	SPI_MasterIni();
 42c:	0e 94 cb 01 	call	0x396	; 0x396 <SPI_MasterIni>

	SPI_PORT |= (1<<SS);						//Put card in waiting
 430:	c4 9a       	sbi	0x18, 4	; 24
 432:	ca e0       	ldi	r28, 0x0A	; 10
 434:	d0 e0       	ldi	r29, 0x00	; 0
	for(i=0;i<10;i++)	SPI_SendByte(0xFF);		//Send 10*8=80 pulse to wake up card
 436:	8f ef       	ldi	r24, 0xFF	; 255
 438:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SPI_SendByte>
 43c:	21 97       	sbiw	r28, 0x01	; 1
 43e:	d9 f7       	brne	.-10     	; 0x436 <Card_Ini+0xe>
	SPI_PORT &= ~(1<<SS);						//Activate card in SPI mode
 440:	c4 98       	cbi	0x18, 4	; 24

	Card_Cmd(CMD0,0,0x95);						//Reset the card with CMD0
 442:	25 e9       	ldi	r18, 0x95	; 149
 444:	40 e0       	ldi	r20, 0x00	; 0
 446:	50 e0       	ldi	r21, 0x00	; 0
 448:	ba 01       	movw	r22, r20
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <Card_Cmd>
	if (Card_Respond(0x01)==0)					//If card won't respond
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	0e 94 dd 01 	call	0x3ba	; 0x3ba <Card_Respond>
 456:	81 11       	cpse	r24, r1
 458:	07 c0       	rjmp	.+14     	; 0x468 <Card_Ini+0x40>
	{
		Card_Status=1;							//Set card status for when errors occur or timeout
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <Card_Status>
		SPI_PORT |= (1<<SS);
 460:	c4 9a       	sbi	0x18, 4	; 24
		return Card_Status;
 462:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <Card_Status>
 466:	1d c0       	rjmp	.+58     	; 0x4a2 <Card_Ini+0x7a>
	}

	Card_Cmd(CMD1,0,0xFF);						//Request the card to enter SPI Mode
 468:	2f ef       	ldi	r18, 0xFF	; 255
 46a:	40 e0       	ldi	r20, 0x00	; 0
 46c:	50 e0       	ldi	r21, 0x00	; 0
 46e:	ba 01       	movw	r22, r20
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <Card_Cmd>
	if(Card_Respond(0x00)==0)
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	0e 94 dd 01 	call	0x3ba	; 0x3ba <Card_Respond>
 47c:	81 11       	cpse	r24, r1
 47e:	07 c0       	rjmp	.+14     	; 0x48e <Card_Ini+0x66>
	{
		Card_Status=2;
 480:	82 e0       	ldi	r24, 0x02	; 2
 482:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <Card_Status>
		SPI_PORT |= (1<<SS);
 486:	c4 9a       	sbi	0x18, 4	; 24
		return Card_Status;
 488:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <Card_Status>
 48c:	0a c0       	rjmp	.+20     	; 0x4a2 <Card_Ini+0x7a>
	}

	Card_Cmd(CMD16,Block_Length,0xFF);			//Set block length for the card
 48e:	2f ef       	ldi	r18, 0xFF	; 255
 490:	4f ef       	ldi	r20, 0xFF	; 255
 492:	50 e0       	ldi	r21, 0x00	; 0
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	70 e0       	ldi	r23, 0x00	; 0
 498:	80 e1       	ldi	r24, 0x10	; 16
 49a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <Card_Cmd>

	SPI_PORT |= (1<<SS);						//Put the card in waiting
 49e:	c4 9a       	sbi	0x18, 4	; 24
	return 0;
 4a0:	80 e0       	ldi	r24, 0x00	; 0
}
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

000004a8 <Card_Write>:

uint8_t Card_Write(uint32_t LBAddress, char *buff)		//Write to a sector in MMC/SD
{
 4a8:	0f 93       	push	r16
 4aa:	1f 93       	push	r17
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	8a 01       	movw	r16, r20
	uint8_t i;
	uint32_t tempA;
	tempA=512*LBAddress;
	//char buffercount[4];

	SPI_PORT &= ~(1<<SS);								//Activate card in SPI mode
 4b2:	c4 98       	cbi	0x18, 4	; 24

	Card_Cmd(CMD24,tempA,0x95);							//Request to start writing process
 4b4:	ab 01       	movw	r20, r22
 4b6:	bc 01       	movw	r22, r24
 4b8:	03 2e       	mov	r0, r19
 4ba:	39 e0       	ldi	r19, 0x09	; 9
 4bc:	44 0f       	add	r20, r20
 4be:	55 1f       	adc	r21, r21
 4c0:	66 1f       	adc	r22, r22
 4c2:	77 1f       	adc	r23, r23
 4c4:	3a 95       	dec	r19
 4c6:	d1 f7       	brne	.-12     	; 0x4bc <Card_Write+0x14>
 4c8:	30 2d       	mov	r19, r0
 4ca:	25 e9       	ldi	r18, 0x95	; 149
 4cc:	88 e1       	ldi	r24, 0x18	; 24
 4ce:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <Card_Cmd>
	if (Card_Respond(0x00)==0)
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	0e 94 dd 01 	call	0x3ba	; 0x3ba <Card_Respond>
 4d8:	81 11       	cpse	r24, r1
 4da:	07 c0       	rjmp	.+14     	; 0x4ea <Card_Write+0x42>
	{
		Card_Status=4;
 4dc:	84 e0       	ldi	r24, 0x04	; 4
 4de:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <Card_Status>
		SPI_PORT |= (1<<SS);
 4e2:	c4 9a       	sbi	0x18, 4	; 24
		return Card_Status;
 4e4:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <Card_Status>
 4e8:	20 c0       	rjmp	.+64     	; 0x52a <Card_Write+0x82>
	}

	SPI_SendByte(0xFE);									//Send data token, ready to transfer data, token=0xFE
 4ea:	8e ef       	ldi	r24, 0xFE	; 254
 4ec:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SPI_SendByte>
 4f0:	e8 01       	movw	r28, r16
 4f2:	01 50       	subi	r16, 0x01	; 1
 4f4:	1f 4f       	sbci	r17, 0xFF	; 255

	for(i=0;i<Block_Length;i++)
	{
		SPI_SendByte(buff[i]);	//Send the whole block of predetermined bytes
 4f6:	89 91       	ld	r24, Y+
 4f8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SPI_SendByte>
		return Card_Status;
	}

	SPI_SendByte(0xFE);									//Send data token, ready to transfer data, token=0xFE

	for(i=0;i<Block_Length;i++)
 4fc:	c0 17       	cp	r28, r16
 4fe:	d1 07       	cpc	r29, r17
 500:	d1 f7       	brne	.-12     	; 0x4f6 <Card_Write+0x4e>
		//_delay_ms(50);
	}

	//Lcd4_Clear();
	//Lcd4_SetString("Checksum...");
	SPI_SendByte(0xFF);									//2 checksum bytes
 502:	8f ef       	ldi	r24, 0xFF	; 255
 504:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SPI_SendByte>
	SPI_SendByte(0xFF);
 508:	8f ef       	ldi	r24, 0xFF	; 255
 50a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SPI_SendByte>

	if((SPI_ReadByte()&0x0F)!=0x05)						//Check respond from the card, must be 5
 50e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <SPI_ReadByte>
 512:	8f 70       	andi	r24, 0x0F	; 15
 514:	85 30       	cpi	r24, 0x05	; 5
 516:	39 f0       	breq	.+14     	; 0x526 <Card_Write+0x7e>
	{
		Card_Status=5;
 518:	85 e0       	ldi	r24, 0x05	; 5
 51a:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <Card_Status>
		SPI_PORT |= (1<<SS);
 51e:	c4 9a       	sbi	0x18, 4	; 24
		return Card_Status;
 520:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <Card_Status>
 524:	02 c0       	rjmp	.+4      	; 0x52a <Card_Write+0x82>
	}

	SPI_PORT |= (1<<SS);								//Put the card in waiting
 526:	c4 9a       	sbi	0x18, 4	; 24
	return 0;
 528:	80 e0       	ldi	r24, 0x00	; 0
}
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	1f 91       	pop	r17
 530:	0f 91       	pop	r16
 532:	08 95       	ret

00000534 <Card_Read>:

uint8_t Card_Read(uint32_t LBAddress, char *buff)		//Read to a sector in MMC/SD
{
 534:	0f 93       	push	r16
 536:	1f 93       	push	r17
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
 53c:	8a 01       	movw	r16, r20
	uint8_t i;
	uint32_t tempA;
	tempA=512*LBAddress;

	SPI_PORT &= ~(1<<SS);								//Activate card in SPI mode
 53e:	c4 98       	cbi	0x18, 4	; 24

	Card_Cmd(CMD17,tempA,0xFF);							//Request to start reading process
 540:	ab 01       	movw	r20, r22
 542:	bc 01       	movw	r22, r24
 544:	03 2e       	mov	r0, r19
 546:	39 e0       	ldi	r19, 0x09	; 9
 548:	44 0f       	add	r20, r20
 54a:	55 1f       	adc	r21, r21
 54c:	66 1f       	adc	r22, r22
 54e:	77 1f       	adc	r23, r23
 550:	3a 95       	dec	r19
 552:	d1 f7       	brne	.-12     	; 0x548 <Card_Read+0x14>
 554:	30 2d       	mov	r19, r0
 556:	2f ef       	ldi	r18, 0xFF	; 255
 558:	81 e1       	ldi	r24, 0x11	; 17
 55a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <Card_Cmd>
	if (Card_Respond(0x00)==0)
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	0e 94 dd 01 	call	0x3ba	; 0x3ba <Card_Respond>
 564:	81 11       	cpse	r24, r1
 566:	07 c0       	rjmp	.+14     	; 0x576 <Card_Read+0x42>
	{
		Card_Status=7;
 568:	87 e0       	ldi	r24, 0x07	; 7
 56a:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <Card_Status>
		SPI_PORT |= (1<<SS);
 56e:	c4 9a       	sbi	0x18, 4	; 24
		return Card_Status;
 570:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <Card_Status>
 574:	1d c0       	rjmp	.+58     	; 0x5b0 <Card_Read+0x7c>
	}

	if (Card_Respond(0xFE)==0)							//Verify the token received
 576:	8e ef       	ldi	r24, 0xFE	; 254
 578:	0e 94 dd 01 	call	0x3ba	; 0x3ba <Card_Respond>
 57c:	81 11       	cpse	r24, r1
 57e:	07 c0       	rjmp	.+14     	; 0x58e <Card_Read+0x5a>
	{
		Card_Status=8;
 580:	88 e0       	ldi	r24, 0x08	; 8
 582:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <Card_Status>
		SPI_PORT |= (1<<SS);
 586:	c4 9a       	sbi	0x18, 4	; 24
		return Card_Status;
 588:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <Card_Status>
 58c:	11 c0       	rjmp	.+34     	; 0x5b0 <Card_Read+0x7c>
 58e:	e8 01       	movw	r28, r16
 590:	01 50       	subi	r16, 0x01	; 1
 592:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	for(i=0;i<Block_Length;i++)	buff[i]=SPI_ReadByte();	//Read the whole block of predetermined bytes
 594:	0e 94 d7 01 	call	0x3ae	; 0x3ae <SPI_ReadByte>
 598:	89 93       	st	Y+, r24
 59a:	c0 17       	cp	r28, r16
 59c:	d1 07       	cpc	r29, r17
 59e:	d1 f7       	brne	.-12     	; 0x594 <Card_Read+0x60>

	SPI_SendByte(0xFF);									//2 checksum bytes
 5a0:	8f ef       	ldi	r24, 0xFF	; 255
 5a2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SPI_SendByte>
	SPI_SendByte(0xFF);
 5a6:	8f ef       	ldi	r24, 0xFF	; 255
 5a8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SPI_SendByte>

	SPI_PORT |= (1<<SS);								//Put the card in waiting
 5ac:	c4 9a       	sbi	0x18, 4	; 24
	return 0;
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
 5b4:	1f 91       	pop	r17
 5b6:	0f 91       	pop	r16
 5b8:	08 95       	ret

000005ba <UARTIni>:

volatile uint8_t i=0;

void UARTIni(char rx, char tx)
{
	UBRRH=0;									//f=16MHz, baud rate=9614bps
 5ba:	10 bc       	out	0x20, r1	; 32
	UBRRL=103;
 5bc:	97 e6       	ldi	r25, 0x67	; 103
 5be:	99 b9       	out	0x09, r25	; 9
	
	UCSRA=0x00;									//U2X=0:Normal speed, MPCM=0:single processor
 5c0:	1b b8       	out	0x0b, r1	; 11
	
	if(rx==1)	//Enable RX and its interrupt
 5c2:	81 30       	cpi	r24, 0x01	; 1
 5c4:	29 f4       	brne	.+10     	; 0x5d0 <UARTIni+0x16>
	{
		sei();
 5c6:	78 94       	sei
		UCSRB|= (1<<RXEN)|(1<<RXCIE);
 5c8:	8a b1       	in	r24, 0x0a	; 10
 5ca:	80 69       	ori	r24, 0x90	; 144
 5cc:	8a b9       	out	0x0a, r24	; 10
 5ce:	03 c0       	rjmp	.+6      	; 0x5d6 <UARTIni+0x1c>
	}
	else		UCSRB&= ~((1<<RXEN)|(1<<RXCIE));
 5d0:	8a b1       	in	r24, 0x0a	; 10
 5d2:	8f 76       	andi	r24, 0x6F	; 111
 5d4:	8a b9       	out	0x0a, r24	; 10
	if(tx==1)	UCSRB|= (1<<TXEN);				//Enable TX
 5d6:	61 30       	cpi	r22, 0x01	; 1
 5d8:	11 f4       	brne	.+4      	; 0x5de <UARTIni+0x24>
 5da:	53 9a       	sbi	0x0a, 3	; 10
 5dc:	01 c0       	rjmp	.+2      	; 0x5e0 <UARTIni+0x26>
	else		UCSRB&= ~(1<<TXEN);
 5de:	53 98       	cbi	0x0a, 3	; 10
	
	UCSRC|= (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);	//Choose UCSRC, Asynchronous mode, no Parity, 1 Stop bit, UCSZ2:0=011: 8 bit data,
 5e0:	80 b5       	in	r24, 0x20	; 32
 5e2:	86 68       	ori	r24, 0x86	; 134
 5e4:	80 bd       	out	0x20, r24	; 32
 5e6:	08 95       	ret

000005e8 <UART_SendChar>:
}

void UART_SendChar(char uartchar)
{
 5e8:	cf 93       	push	r28
 5ea:	c8 2f       	mov	r28, r24
	if(uartchar=='\n')	UART_SendChar('\r');
 5ec:	8a 30       	cpi	r24, 0x0A	; 10
 5ee:	19 f4       	brne	.+6      	; 0x5f6 <UART_SendChar+0xe>
 5f0:	8d e0       	ldi	r24, 0x0D	; 13
 5f2:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <UART_SendChar>
	while(bit_is_clear(UCSRA,UDRE)){;}
 5f6:	5d 9b       	sbis	0x0b, 5	; 11
 5f8:	fe cf       	rjmp	.-4      	; 0x5f6 <UART_SendChar+0xe>
	UDR=uartchar;
 5fa:	cc b9       	out	0x0c, r28	; 12
}
 5fc:	cf 91       	pop	r28
 5fe:	08 95       	ret

00000600 <UART_SendString>:

void UART_SendString(char *pStr)	//Send a string
{
 600:	cf 93       	push	r28
 602:	df 93       	push	r29
 604:	ec 01       	movw	r28, r24
	while(*pStr>0)					//Whenever pointer gets to the end, *pStr = 0
 606:	88 81       	ld	r24, Y
 608:	88 23       	and	r24, r24
 60a:	31 f0       	breq	.+12     	; 0x618 <UART_SendString+0x18>
 60c:	21 96       	adiw	r28, 0x01	; 1
	UART_SendChar(*pStr++);			//Send individual char and increase pointer address
 60e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <UART_SendChar>
	UDR=uartchar;
}

void UART_SendString(char *pStr)	//Send a string
{
	while(*pStr>0)					//Whenever pointer gets to the end, *pStr = 0
 612:	89 91       	ld	r24, Y+
 614:	81 11       	cpse	r24, r1
 616:	fb cf       	rjmp	.-10     	; 0x60e <UART_SendString+0xe>
	UART_SendChar(*pStr++);			//Send individual char and increase pointer address
}
 618:	df 91       	pop	r29
 61a:	cf 91       	pop	r28
 61c:	08 95       	ret

0000061e <__vector_13>:

ISR(USART_RXC_vect) //UART RECIEVE INTERRUPT
{
 61e:	1f 92       	push	r1
 620:	0f 92       	push	r0
 622:	0f b6       	in	r0, 0x3f	; 63
 624:	0f 92       	push	r0
 626:	11 24       	eor	r1, r1
 628:	8f 93       	push	r24
 62a:	ef 93       	push	r30
 62c:	ff 93       	push	r31
	uart_data_rx=UDR;
 62e:	8c b1       	in	r24, 0x0c	; 12
 630:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <uart_data_rx>
	if(i==100)	i=0;	//reset the storage after 100 write
 634:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <i>
 638:	84 36       	cpi	r24, 0x64	; 100
 63a:	11 f4       	brne	.+4      	; 0x640 <__vector_13+0x22>
 63c:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <i>
	data_rx_storage[i++]=uart_data_rx;	//store data for further use
 640:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <i>
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	8e 0f       	add	r24, r30
 648:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <i>
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <uart_data_rx>
 652:	ee 5e       	subi	r30, 0xEE	; 238
 654:	fd 4f       	sbci	r31, 0xFD	; 253
 656:	80 83       	st	Z, r24
 658:	ff 91       	pop	r31
 65a:	ef 91       	pop	r30
 65c:	8f 91       	pop	r24
 65e:	0f 90       	pop	r0
 660:	0f be       	out	0x3f, r0	; 63
 662:	0f 90       	pop	r0
 664:	1f 90       	pop	r1
 666:	18 95       	reti

00000668 <_exit>:
 668:	f8 94       	cli

0000066a <__stop_program>:
 66a:	ff cf       	rjmp	.-2      	; 0x66a <__stop_program>
