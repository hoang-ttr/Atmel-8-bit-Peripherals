
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000002ac  00000340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006e  0080006e  0000034e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000957  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003bd  00000000  00000000  00000db3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000525  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00001698  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000282  00000000  00000000  000017d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002bc  00000000  00000000  00001a52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00001d0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ea       	ldi	r30, 0xAC	; 172
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  8a:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SPIMaster_Ini>:
	SPI_PORT &= ~(1<<ss);	//Select a slave
	
	SPDR = data;						//Send the data
	while(bit_is_clear(SPSR,SPIF)){;}	//Wait until SPIF is set
	
	SPI_PORT |= (1<<ss);				//Return the slave to idle status
  92:	87 b3       	in	r24, 0x17	; 23
  94:	80 6b       	ori	r24, 0xB0	; 176
  96:	87 bb       	out	0x17, r24	; 23
  98:	be 98       	cbi	0x17, 6	; 23
  9a:	8d b1       	in	r24, 0x0d	; 13
  9c:	80 6d       	ori	r24, 0xD0	; 208
  9e:	8d b9       	out	0x0d, r24	; 13
  a0:	c4 9a       	sbi	0x18, 4	; 24
  a2:	08 95       	ret

000000a4 <SPI_Send_9bit>:

void SPI_Send_9bit(uint8_t ss, uint16_t data)
{
	uint8_t temp=((data>>8)&0x01);	//bit 8
	
	SPI_PORT &= ~(1<<ss);	//Select a slave
  a4:	48 b3       	in	r20, 0x18	; 24
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	f9 01       	movw	r30, r18
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <SPI_Send_9bit+0xe>
  ae:	ee 0f       	add	r30, r30
  b0:	ff 1f       	adc	r31, r31
  b2:	8a 95       	dec	r24
  b4:	e2 f7       	brpl	.-8      	; 0xae <SPI_Send_9bit+0xa>
  b6:	cf 01       	movw	r24, r30
  b8:	2e 2f       	mov	r18, r30
  ba:	20 95       	com	r18
  bc:	42 23       	and	r20, r18
  be:	48 bb       	out	0x18, r20	; 24
	
	//Sending the 9th bit using bit banging process
	{
		SPCR &= ~(1<<SPE);		//Disable SPI
  c0:	6e 98       	cbi	0x0d, 6	; 13
	
			SPI_PORT &= ~(1<<SCK);	//Clock LOW
  c2:	c7 98       	cbi	0x18, 7	; 24
		
			if (temp)	SPI_PORT |= (1<<MOSI);	//Send the MSB, if it is 1
  c4:	70 ff       	sbrs	r23, 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <SPI_Send_9bit+0x28>
  c8:	c5 9a       	sbi	0x18, 5	; 24
  ca:	01 c0       	rjmp	.+2      	; 0xce <SPI_Send_9bit+0x2a>
			else SPI_PORT &= ~(1<<MOSI);
  cc:	c5 98       	cbi	0x18, 5	; 24
	
			SPI_PORT |= (1<<SCK);	//Clock HIGH
  ce:	c7 9a       	sbi	0x18, 7	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	f5 e0       	ldi	r31, 0x05	; 5
  d2:	fa 95       	dec	r31
  d4:	f1 f7       	brne	.-4      	; 0xd2 <SPI_Send_9bit+0x2e>
  d6:	00 00       	nop
			_delay_us(1);
			SPI_PORT &= ~(1<<SCK);	//Clock LOW
  d8:	c7 98       	cbi	0x18, 7	; 24
  da:	25 e0       	ldi	r18, 0x05	; 5
  dc:	2a 95       	dec	r18
  de:	f1 f7       	brne	.-4      	; 0xdc <SPI_Send_9bit+0x38>
  e0:	00 00       	nop
			_delay_us(1);
		SPCR |= (1<<SPE);		//Enable SPI
  e2:	6e 9a       	sbi	0x0d, 6	; 13
	}
	
	SPDR = data;						//Send the data
  e4:	6f b9       	out	0x0f, r22	; 15
	while(bit_is_clear(SPSR,SPIF)){;}	//Wait until SPIF is set
  e6:	77 9b       	sbis	0x0e, 7	; 14
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <SPI_Send_9bit+0x42>
		
	SPI_PORT |= (1<<ss);				//Return the slave to idle status
  ea:	98 b3       	in	r25, 0x18	; 24
  ec:	89 2b       	or	r24, r25
  ee:	88 bb       	out	0x18, r24	; 24
  f0:	08 95       	ret

000000f2 <__vector_12>:
}

ISR(SPI_STC_vect)
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
	data_rx=SPDR;
 100:	8f b1       	in	r24, 0x0f	; 15
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__data_end+0x1>
 108:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
}
 10c:	9f 91       	pop	r25
 10e:	8f 91       	pop	r24
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <main>:
uint8_t spi_data[3]={10, 20, 30};		

int main(void)
{
	uint8_t i;
	Lcd4_Ini();
 11a:	0e 94 09 01 	call	0x212	; 0x212 <Lcd4_Ini>
	Lcd4_Clear();
 11e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <Lcd4_Clear>
	SPIMaster_Ini();	//Ini. SPI as Master
 122:	0e 94 49 00 	call	0x92	; 0x92 <SPIMaster_Ini>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	8f e9       	ldi	r24, 0x9F	; 159
 128:	9f e0       	ldi	r25, 0x0F	; 15
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0x10>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x16>
 130:	00 00       	nop
 132:	c3 e0       	ldi	r28, 0x03	; 3
	_delay_ms(1);		//Wait for slaves to initiate
	for (i=0;i<3;i++)
	{
		SPI_Send_9bit(SS,0b010011001);
 134:	69 e9       	ldi	r22, 0x99	; 153
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	84 e0       	ldi	r24, 0x04	; 4
 13a:	0e 94 52 00 	call	0xa4	; 0xa4 <SPI_Send_9bit>
 13e:	9f ef       	ldi	r25, 0xFF	; 255
 140:	23 ed       	ldi	r18, 0xD3	; 211
 142:	80 e3       	ldi	r24, 0x30	; 48
 144:	91 50       	subi	r25, 0x01	; 1
 146:	20 40       	sbci	r18, 0x00	; 0
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <main+0x2a>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0x34>
 14e:	00 00       	nop
 150:	c1 50       	subi	r28, 0x01	; 1
	uint8_t i;
	Lcd4_Ini();
	Lcd4_Clear();
	SPIMaster_Ini();	//Ini. SPI as Master
	_delay_ms(1);		//Wait for slaves to initiate
	for (i=0;i<3;i++)
 152:	81 f7       	brne	.-32     	; 0x134 <main+0x1a>
	/*for (i=0;i<3;i++)
	{
		SPI_Send_9bit(SS,spi_data[i]);
		_delay_ms(1000);
	}*/	
	Lcd4_SetString("Process done!");
 154:	80 e6       	ldi	r24, 0x60	; 96
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 45 01 	call	0x28a	; 0x28a <Lcd4_SetString>
    while (1){;}
 15c:	ff cf       	rjmp	.-2      	; 0x15c <main+0x42>

0000015e <Lcd4_Write_Instruction>:
		Lcd4_Cmd(temp);
	}
	else if(row == 2)
	{
		temp = 0b11000000 + (column-1);
		Lcd4_Cmd(temp);
 15e:	90 98       	cbi	0x12, 0	; 18
 160:	87 ec       	ldi	r24, 0xC7	; 199
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <Lcd4_Write_Instruction+0x6>
 168:	00 c0       	rjmp	.+0      	; 0x16a <Lcd4_Write_Instruction+0xc>
 16a:	00 00       	nop
 16c:	91 98       	cbi	0x12, 1	; 18
 16e:	87 ec       	ldi	r24, 0xC7	; 199
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <Lcd4_Write_Instruction+0x14>
 176:	00 c0       	rjmp	.+0      	; 0x178 <Lcd4_Write_Instruction+0x1a>
 178:	00 00       	nop
 17a:	08 95       	ret

0000017c <Lcd4_Write_Data>:
 17c:	90 9a       	sbi	0x12, 0	; 18
 17e:	87 ec       	ldi	r24, 0xC7	; 199
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <Lcd4_Write_Data+0x6>
 186:	00 c0       	rjmp	.+0      	; 0x188 <Lcd4_Write_Data+0xc>
 188:	00 00       	nop
 18a:	91 98       	cbi	0x12, 1	; 18
 18c:	87 ec       	ldi	r24, 0xC7	; 199
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <Lcd4_Write_Data+0x14>
 194:	00 c0       	rjmp	.+0      	; 0x196 <Lcd4_Write_Data+0x1a>
 196:	00 00       	nop
 198:	08 95       	ret

0000019a <Lcd4_Execute>:
 19a:	80 ff       	sbrs	r24, 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <Lcd4_Execute+0x8>
 19e:	94 9a       	sbi	0x12, 4	; 18
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <Lcd4_Execute+0xa>
 1a2:	94 98       	cbi	0x12, 4	; 18
 1a4:	81 ff       	sbrs	r24, 1
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <Lcd4_Execute+0x12>
 1a8:	95 9a       	sbi	0x12, 5	; 18
 1aa:	01 c0       	rjmp	.+2      	; 0x1ae <Lcd4_Execute+0x14>
 1ac:	95 98       	cbi	0x12, 5	; 18
 1ae:	82 ff       	sbrs	r24, 2
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <Lcd4_Execute+0x1c>
 1b2:	96 9a       	sbi	0x12, 6	; 18
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <Lcd4_Execute+0x1e>
 1b6:	96 98       	cbi	0x12, 6	; 18
 1b8:	83 ff       	sbrs	r24, 3
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <Lcd4_Execute+0x26>
 1bc:	97 9a       	sbi	0x12, 7	; 18
 1be:	01 c0       	rjmp	.+2      	; 0x1c2 <Lcd4_Execute+0x28>
 1c0:	97 98       	cbi	0x12, 7	; 18
 1c2:	92 9a       	sbi	0x12, 2	; 18
 1c4:	87 ec       	ldi	r24, 0xC7	; 199
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <Lcd4_Execute+0x2e>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <Lcd4_Execute+0x34>
 1ce:	00 00       	nop
 1d0:	92 98       	cbi	0x12, 2	; 18
 1d2:	87 ec       	ldi	r24, 0xC7	; 199
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <Lcd4_Execute+0x3c>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <Lcd4_Execute+0x42>
 1dc:	00 00       	nop
 1de:	08 95       	ret

000001e0 <Lcd4_Cmd>:
 1e0:	cf 93       	push	r28
 1e2:	c8 2f       	mov	r28, r24
 1e4:	0e 94 af 00 	call	0x15e	; 0x15e <Lcd4_Write_Instruction>
 1e8:	8c 2f       	mov	r24, r28
 1ea:	82 95       	swap	r24
 1ec:	8f 70       	andi	r24, 0x0F	; 15
 1ee:	0e 94 cd 00 	call	0x19a	; 0x19a <Lcd4_Execute>
 1f2:	8c 2f       	mov	r24, r28
 1f4:	8f 70       	andi	r24, 0x0F	; 15
 1f6:	0e 94 cd 00 	call	0x19a	; 0x19a <Lcd4_Execute>
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <Lcd4_Clear>:
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <Lcd4_Cmd>
 204:	8f e3       	ldi	r24, 0x3F	; 63
 206:	9f e1       	ldi	r25, 0x1F	; 31
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <Lcd4_Clear+0xa>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <Lcd4_Clear+0x10>
 20e:	00 00       	nop
 210:	08 95       	ret

00000212 <Lcd4_Ini>:
	}
}
void Lcd4_Ini(void)								//Initialize LCD
{
	LCD_DDR = 0xFF;
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	81 bb       	out	0x11, r24	; 17
 216:	2f ef       	ldi	r18, 0xFF	; 255
 218:	89 ef       	ldi	r24, 0xF9	; 249
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	21 50       	subi	r18, 0x01	; 1
 21e:	80 40       	sbci	r24, 0x00	; 0
 220:	90 40       	sbci	r25, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <Lcd4_Ini+0xa>
 224:	00 c0       	rjmp	.+0      	; 0x226 <Lcd4_Ini+0x14>
 226:	00 00       	nop
	//----------Reset process from data sheet----------//
	_delay_ms(20);	//Wait for more than 15ms after VCC=4.5V
	Lcd4_Cmd(0x03);
 228:	83 e0       	ldi	r24, 0x03	; 3
 22a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <Lcd4_Cmd>
 22e:	8f e1       	ldi	r24, 0x1F	; 31
 230:	9e e4       	ldi	r25, 0x4E	; 78
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <Lcd4_Ini+0x20>
 236:	00 c0       	rjmp	.+0      	; 0x238 <Lcd4_Ini+0x26>
 238:	00 00       	nop
	_delay_ms(5);	//Wait for more than 4.1ms
	Lcd4_Cmd(0x03);
 23a:	83 e0       	ldi	r24, 0x03	; 3
 23c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <Lcd4_Cmd>
 240:	8f e9       	ldi	r24, 0x9F	; 159
 242:	9f e0       	ldi	r25, 0x0F	; 15
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <Lcd4_Ini+0x32>
 248:	00 c0       	rjmp	.+0      	; 0x24a <Lcd4_Ini+0x38>
 24a:	00 00       	nop
	_delay_ms(1);	//Wait for more than 100us
	Lcd4_Cmd(0x03);
 24c:	83 e0       	ldi	r24, 0x03	; 3
 24e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <Lcd4_Cmd>
	//--------------------//
	Lcd4_Cmd(0x02);	//Function set: 4bit
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <Lcd4_Cmd>
	Lcd4_Cmd(0x28);	//Function set: 4bit, 2 lines, 5x8 font		---	0b001DNF** (D:data length,N:no. of line,F:font)
 258:	88 e2       	ldi	r24, 0x28	; 40
 25a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C); //Display control: display ON	--- 0b00001DCB (D:display,C:cursor,B:blinking)
 25e:	8c e0       	ldi	r24, 0x0C	; 12
 260:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <Lcd4_Cmd>
	Lcd4_Cmd(0x06); //Entry mode set: increment, no accompany	--- 0b000001IS (I:increment/decrement,S:acc. display shift)
 264:	86 e0       	ldi	r24, 0x06	; 6
 266:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <Lcd4_Cmd>
 26a:	08 95       	ret

0000026c <Lcd4_SetChar>:
}
void Lcd4_SetChar(char character)				//Send a single character
{
 26c:	cf 93       	push	r28
 26e:	c8 2f       	mov	r28, r24
	Lcd4_Write_Data();
 270:	0e 94 be 00 	call	0x17c	; 0x17c <Lcd4_Write_Data>
	
	Lcd4_Execute(character>>4); //Data transfer
 274:	8c 2f       	mov	r24, r28
 276:	82 95       	swap	r24
 278:	8f 70       	andi	r24, 0x0F	; 15
 27a:	0e 94 cd 00 	call	0x19a	; 0x19a <Lcd4_Execute>
	Lcd4_Execute(character&0x0F);
 27e:	8c 2f       	mov	r24, r28
 280:	8f 70       	andi	r24, 0x0F	; 15
 282:	0e 94 cd 00 	call	0x19a	; 0x19a <Lcd4_Execute>
}
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <Lcd4_SetString>:
void Lcd4_SetString(char *pStr)					//Send a string
{
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	ec 01       	movw	r28, r24
	while(*pStr>0) //Whenever pointer gets to the end, *pStr = 0
 290:	88 81       	ld	r24, Y
 292:	88 23       	and	r24, r24
 294:	31 f0       	breq	.+12     	; 0x2a2 <Lcd4_SetString+0x18>
 296:	21 96       	adiw	r28, 0x01	; 1
	Lcd4_SetChar(*pStr++); //Send individual char and increase pointer address
 298:	0e 94 36 01 	call	0x26c	; 0x26c <Lcd4_SetChar>
	Lcd4_Execute(character>>4); //Data transfer
	Lcd4_Execute(character&0x0F);
}
void Lcd4_SetString(char *pStr)					//Send a string
{
	while(*pStr>0) //Whenever pointer gets to the end, *pStr = 0
 29c:	89 91       	ld	r24, Y+
 29e:	81 11       	cpse	r24, r1
 2a0:	fb cf       	rjmp	.-10     	; 0x298 <Lcd4_SetString+0xe>
	Lcd4_SetChar(*pStr++); //Send individual char and increase pointer address
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <_exit>:
 2a8:	f8 94       	cli

000002aa <__stop_program>:
 2aa:	ff cf       	rjmp	.-2      	; 0x2aa <__stop_program>
