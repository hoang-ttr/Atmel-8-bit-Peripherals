
Buttons.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000158  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000615  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000580  00000000  00000000  00000801  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000227  00000000  00000000  00000d81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00000fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000315  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000013  00000000  00000000  000012f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 42 00 	call	0x84	; 0x84 <main>
  74:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ButtonInit>:

volatile uint8_t button_down;

void ButtonInit(void)
{
	Button_DDR = 0x00;	//Buttons as INPUT
  7c:	17 ba       	out	0x17, r1	; 23
	ButtonPullup = 0xFF;	//Enable pull-up
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	88 bb       	out	0x18, r24	; 24
  82:	08 95       	ret

00000084 <main>:
#define LED PORTC
#define LED_DDR DDRC

int main(void)
{
	ButtonInit();
  84:	0e 94 3e 00 	call	0x7c	; 0x7c <ButtonInit>
	LED_DDR = 0xFF;		//LED as output
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	84 bb       	out	0x14, r24	; 20

static inline void debounce(void)
{
	static uint8_t count = 0;	// Counter for number of equal states
	static uint8_t button_state = 0;	// Keeps track of current (debounced)state
	uint8_t current_state = (~ButtonPin & (1<<ButtonP));	// Check if button is high or low for the moment
  8c:	61 e0       	ldi	r22, 0x01	; 1
  8e:	50 e0       	ldi	r21, 0x00	; 0
  90:	36 2f       	mov	r19, r22
  92:	45 2f       	mov	r20, r21
  94:	86 b3       	in	r24, 0x16	; 22
  96:	93 2f       	mov	r25, r19
  98:	28 2f       	mov	r18, r24
  9a:	21 70       	andi	r18, 0x01	; 1
  9c:	80 fd       	sbrc	r24, 0
  9e:	94 2f       	mov	r25, r20

	if (current_state != button_state)
  a0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <button_state.1608>
  a4:	98 17       	cp	r25, r24
  a6:	81 f0       	breq	.+32     	; 0xc8 <main+0x44>
	{
		count++;		// Button state is about to be changed, increase counter
  a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  ac:	8f 5f       	subi	r24, 0xFF	; 255
  ae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		if (count >= 100)
  b2:	84 36       	cpi	r24, 0x64	; 100
  b4:	58 f0       	brcs	.+22     	; 0xcc <main+0x48>
		{
			button_state = current_state;	// The button have not bounced for four checks, change state
  b6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <button_state.1608>
			if (current_state != 0)			// If the button was pressed (not released), tell main so
  ba:	21 11       	cpse	r18, r1
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <main+0x3e>
			{
				button_down = 1;
  be:	30 93 62 00 	sts	0x0062, r19	; 0x800062 <button_down>
			}
			count = 0;
  c2:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <_edata>
  c6:	02 c0       	rjmp	.+4      	; 0xcc <main+0x48>
		}
	}
	else
	{
		count = 0;		// Reset counter
  c8:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <_edata>

	while (1)
	{
		debounce();
		if (button_down)
  cc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <button_down>
  d0:	88 23       	and	r24, r24
  d2:	01 f3       	breq	.-64     	; 0x94 <main+0x10>
		{
			button_down =  0;
  d4:	50 93 62 00 	sts	0x0062, r21	; 0x800062 <button_down>
			LED ^= (1 << 0);
  d8:	85 b3       	in	r24, 0x15	; 21
  da:	86 27       	eor	r24, r22
  dc:	85 bb       	out	0x15, r24	; 21
  de:	da cf       	rjmp	.-76     	; 0x94 <main+0x10>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
