
MatrixKeypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000002ee  00000382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800082  00800082  000003a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000917  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000353  00000000  00000000  00000db7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c8  00000000  00000000  0000110a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  000015d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003be  00000000  00000000  00001955  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00001d13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 38       	cpi	r26, 0x83	; 131
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a5 00 	call	0x14a	; 0x14a <main>
  8a:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Keypad_Ini>:
					{'1','2','3','-'},
					{'N','0','=','+'}	};

void Keypad_Ini(void)		//Initialization for keypad
{
	Keypad_DDR = 0xF0;		//For Keypad, C.ABCD=input, R.EFGH=output
  92:	80 ef       	ldi	r24, 0xF0	; 240
  94:	8a bb       	out	0x1a, r24	; 26
	Keypad_Pullup = 0x0F;	//C.ABCD=pull-up, R.EFGH=0
  96:	8f e0       	ldi	r24, 0x0F	; 15
  98:	8b bb       	out	0x1b, r24	; 27
  9a:	08 95       	ret

0000009c <pressKEY>:
}

char pressKEY(void)			//Polling for a key
{
	uint8_t column,row,val,key;
	if(Keypad_In!=0x0F) //Check if any key is pressed
  9c:	89 b3       	in	r24, 0x19	; 25
  9e:	8f 30       	cpi	r24, 0x0F	; 15
  a0:	09 f4       	brne	.+2      	; 0xa4 <pressKEY+0x8>
  a2:	51 c0       	rjmp	.+162    	; 0x146 <pressKEY+0xaa>
	{
			val = Keypad_In & 0x0F; //Store the column
  a4:	49 b3       	in	r20, 0x19	; 25
  a6:	4f 70       	andi	r20, 0x0F	; 15
  a8:	84 e0       	ldi	r24, 0x04	; 4
  aa:	90 e0       	ldi	r25, 0x00	; 0
			for (row=4;row<=7;row++)
			{
				Keypad_Pullup = 0xFF - (1<<row); //Scan each row EFGH
  ac:	61 e0       	ldi	r22, 0x01	; 1
  ae:	70 e0       	ldi	r23, 0x00	; 0
				_delay_us(1);	//IMPORTANT: changing PORT and reading PIN need delay time
				key = Keypad_In & 0x0F; // Store scanned row EFGH
				if(key==val) //Check if the right key is pressed
					for (column=0;column<=3;column++)
						if(key==scanCODE[column])
  b0:	e0 e7       	ldi	r30, 0x70	; 112
  b2:	f0 e0       	ldi	r31, 0x00	; 0
	if(Keypad_In!=0x0F) //Check if any key is pressed
	{
			val = Keypad_In & 0x0F; //Store the column
			for (row=4;row<=7;row++)
			{
				Keypad_Pullup = 0xFF - (1<<row); //Scan each row EFGH
  b4:	dc 01       	movw	r26, r24
  b6:	9b 01       	movw	r18, r22
  b8:	08 2e       	mov	r0, r24
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <pressKEY+0x24>
  bc:	22 0f       	add	r18, r18
  be:	33 1f       	adc	r19, r19
  c0:	0a 94       	dec	r0
  c2:	e2 f7       	brpl	.-8      	; 0xbc <pressKEY+0x20>
  c4:	20 95       	com	r18
  c6:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	25 e0       	ldi	r18, 0x05	; 5
  ca:	2a 95       	dec	r18
  cc:	f1 f7       	brne	.-4      	; 0xca <pressKEY+0x2e>
  ce:	00 00       	nop
				_delay_us(1);	//IMPORTANT: changing PORT and reading PIN need delay time
				key = Keypad_In & 0x0F; // Store scanned row EFGH
  d0:	29 b3       	in	r18, 0x19	; 25
  d2:	2f 70       	andi	r18, 0x0F	; 15
				if(key==val) //Check if the right key is pressed
  d4:	24 13       	cpse	r18, r20
  d6:	30 c0       	rjmp	.+96     	; 0x138 <pressKEY+0x9c>
					for (column=0;column<=3;column++)
						if(key==scanCODE[column])
  d8:	20 81       	ld	r18, Z
  da:	42 17       	cp	r20, r18
  dc:	91 f0       	breq	.+36     	; 0x102 <pressKEY+0x66>
  de:	21 81       	ldd	r18, Z+1	; 0x01
  e0:	42 17       	cp	r20, r18
  e2:	49 f0       	breq	.+18     	; 0xf6 <pressKEY+0x5a>
  e4:	22 81       	ldd	r18, Z+2	; 0x02
  e6:	42 17       	cp	r20, r18
  e8:	49 f0       	breq	.+18     	; 0xfc <pressKEY+0x60>
  ea:	23 81       	ldd	r18, Z+3	; 0x03
  ec:	42 13       	cpse	r20, r18
  ee:	24 c0       	rjmp	.+72     	; 0x138 <pressKEY+0x9c>
  f0:	83 e0       	ldi	r24, 0x03	; 3
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	08 c0       	rjmp	.+16     	; 0x106 <pressKEY+0x6a>
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	05 c0       	rjmp	.+10     	; 0x106 <pressKEY+0x6a>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <pressKEY+0x6a>
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
						{
							Keypad_Pullup=0x0F;
 106:	2f e0       	ldi	r18, 0x0F	; 15
 108:	2b bb       	out	0x1b, r18	; 27
							pressed = 1;
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	20 93 82 00 	sts	0x0082, r18	; 0x800082 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	3f ef       	ldi	r19, 0xFF	; 255
 112:	45 ea       	ldi	r20, 0xA5	; 165
 114:	2e e0       	ldi	r18, 0x0E	; 14
 116:	31 50       	subi	r19, 0x01	; 1
 118:	40 40       	sbci	r20, 0x00	; 0
 11a:	20 40       	sbci	r18, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <pressKEY+0x7a>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <pressKEY+0x84>
 120:	00 00       	nop
							_delay_ms(300);
							return ascii[row-4][column];
 122:	14 97       	sbiw	r26, 0x04	; 4
 124:	aa 0f       	add	r26, r26
 126:	bb 1f       	adc	r27, r27
 128:	aa 0f       	add	r26, r26
 12a:	bb 1f       	adc	r27, r27
 12c:	a8 0f       	add	r26, r24
 12e:	b9 1f       	adc	r27, r25
 130:	a0 5a       	subi	r26, 0xA0	; 160
 132:	bf 4f       	sbci	r27, 0xFF	; 255
 134:	8c 91       	ld	r24, X
 136:	08 95       	ret
 138:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t column,row,val,key;
	if(Keypad_In!=0x0F) //Check if any key is pressed
	{
			val = Keypad_In & 0x0F; //Store the column
			for (row=4;row<=7;row++)
 13a:	88 30       	cpi	r24, 0x08	; 8
 13c:	91 05       	cpc	r25, r1
 13e:	09 f0       	breq	.+2      	; 0x142 <pressKEY+0xa6>
 140:	b9 cf       	rjmp	.-142    	; 0xb4 <pressKEY+0x18>
							_delay_ms(300);
							return ascii[row-4][column];
						}
			}
	}
	return 0;
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	08 95       	ret
 146:	80 e0       	ldi	r24, 0x00	; 0
}
 148:	08 95       	ret

0000014a <main>:
#include "src/Keypad.h"

int main(void)
{
	char keypad;
	Lcd4_Ini();
 14a:	0e 94 2a 01 	call	0x254	; 0x254 <Lcd4_Ini>
	Lcd4_Clear();
 14e:	0e 94 12 01 	call	0x224	; 0x224 <Lcd4_Clear>
	Keypad_Ini();
 152:	0e 94 49 00 	call	0x92	; 0x92 <Keypad_Ini>
	//
	Lcd4_Cursor(1,1);
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 1c 01 	call	0x238	; 0x238 <Lcd4_Cursor>
	Lcd4_SetString("Key pressed:");
 15e:	84 e7       	ldi	r24, 0x74	; 116
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 66 01 	call	0x2cc	; 0x2cc <Lcd4_SetString>
	Lcd4_Cursor(2,1);
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	0e 94 1c 01 	call	0x238	; 0x238 <Lcd4_Cursor>
	while (1)
	{
		keypad=pressKEY();
 16e:	0e 94 4e 00 	call	0x9c	; 0x9c <pressKEY>
		if(pressed)
 172:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <__data_end>
 176:	99 23       	and	r25, r25
 178:	d1 f3       	breq	.-12     	; 0x16e <main+0x24>
		{
			Lcd4_SetChar(keypad);
 17a:	0e 94 57 01 	call	0x2ae	; 0x2ae <Lcd4_SetChar>
			pressed = 0;
 17e:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__data_end>
 182:	f5 cf       	rjmp	.-22     	; 0x16e <main+0x24>

00000184 <Lcd4_Write_Instruction>:

#include "lcd4bit.h"

void Lcd4_Write_Instruction()
{
	LCD_DATA &= ~RS;
 184:	90 98       	cbi	0x12, 0	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 186:	87 ec       	ldi	r24, 0xC7	; 199
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <Lcd4_Write_Instruction+0x6>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <Lcd4_Write_Instruction+0xc>
 190:	00 00       	nop
	_delay_us(delay_time);
	LCD_DATA &= ~RW;
 192:	91 98       	cbi	0x12, 1	; 18
 194:	87 ec       	ldi	r24, 0xC7	; 199
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <Lcd4_Write_Instruction+0x14>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <Lcd4_Write_Instruction+0x1a>
 19e:	00 00       	nop
 1a0:	08 95       	ret

000001a2 <Lcd4_Write_Data>:
	_delay_us(delay_time);
}
void Lcd4_Write_Data()
{
	LCD_DATA |= RS;
 1a2:	90 9a       	sbi	0x12, 0	; 18
 1a4:	87 ec       	ldi	r24, 0xC7	; 199
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <Lcd4_Write_Data+0x6>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <Lcd4_Write_Data+0xc>
 1ae:	00 00       	nop
	_delay_us(delay_time);
	LCD_DATA &= ~RW;
 1b0:	91 98       	cbi	0x12, 1	; 18
 1b2:	87 ec       	ldi	r24, 0xC7	; 199
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <Lcd4_Write_Data+0x14>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <Lcd4_Write_Data+0x1a>
 1bc:	00 00       	nop
 1be:	08 95       	ret

000001c0 <Lcd4_Execute>:
	_delay_us(delay_time);
}
void Lcd4_Execute(uint8_t data)					//Load data to the LCD
{
	if(data & 1) LCD_DATA|=(1<<4);	//1 = 0b00000001
 1c0:	80 ff       	sbrs	r24, 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <Lcd4_Execute+0x8>
 1c4:	94 9a       	sbi	0x12, 4	; 18
 1c6:	01 c0       	rjmp	.+2      	; 0x1ca <Lcd4_Execute+0xa>
	else LCD_DATA&=~(1<<4);
 1c8:	94 98       	cbi	0x12, 4	; 18
	if(data & 2) LCD_DATA|=(1<<5);	//1 = 0b00000010
 1ca:	81 ff       	sbrs	r24, 1
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <Lcd4_Execute+0x12>
 1ce:	95 9a       	sbi	0x12, 5	; 18
 1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <Lcd4_Execute+0x14>
	else LCD_DATA&=~(1<<5);
 1d2:	95 98       	cbi	0x12, 5	; 18
	if(data & 4) LCD_DATA|=(1<<6);	//1 = 0b00000100
 1d4:	82 ff       	sbrs	r24, 2
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <Lcd4_Execute+0x1c>
 1d8:	96 9a       	sbi	0x12, 6	; 18
 1da:	01 c0       	rjmp	.+2      	; 0x1de <Lcd4_Execute+0x1e>
	else LCD_DATA&=~(1<<6);
 1dc:	96 98       	cbi	0x12, 6	; 18
	if(data & 8) LCD_DATA|=(1<<7);	//1 = 0b00001000
 1de:	83 ff       	sbrs	r24, 3
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <Lcd4_Execute+0x26>
 1e2:	97 9a       	sbi	0x12, 7	; 18
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <Lcd4_Execute+0x28>
	else LCD_DATA&=~(1<<7);
 1e6:	97 98       	cbi	0x12, 7	; 18
	
	LCD_DATA |= E;	//Execute instruction
 1e8:	92 9a       	sbi	0x12, 2	; 18
 1ea:	87 ec       	ldi	r24, 0xC7	; 199
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <Lcd4_Execute+0x2e>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <Lcd4_Execute+0x34>
 1f4:	00 00       	nop
	_delay_us(delay_time);
	LCD_DATA &= ~E;
 1f6:	92 98       	cbi	0x12, 2	; 18
 1f8:	87 ec       	ldi	r24, 0xC7	; 199
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <Lcd4_Execute+0x3c>
 200:	00 c0       	rjmp	.+0      	; 0x202 <Lcd4_Execute+0x42>
 202:	00 00       	nop
 204:	08 95       	ret

00000206 <Lcd4_Cmd>:
	_delay_us(delay_time);
	
}
void Lcd4_Cmd(uint8_t cmd)						//Send a command
{
 206:	cf 93       	push	r28
 208:	c8 2f       	mov	r28, r24
	Lcd4_Write_Instruction();
 20a:	0e 94 c2 00 	call	0x184	; 0x184 <Lcd4_Write_Instruction>
	Lcd4_Execute(cmd>>4);
 20e:	8c 2f       	mov	r24, r28
 210:	82 95       	swap	r24
 212:	8f 70       	andi	r24, 0x0F	; 15
 214:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Lcd4_Execute>
	Lcd4_Execute(cmd&0x0F);
 218:	8c 2f       	mov	r24, r28
 21a:	8f 70       	andi	r24, 0x0F	; 15
 21c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Lcd4_Execute>
}
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <Lcd4_Clear>:

//----------Main functions for use----------//
void Lcd4_Clear()								//Clear screen
{
	Lcd4_Cmd(1);
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	0e 94 03 01 	call	0x206	; 0x206 <Lcd4_Cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22a:	8f e3       	ldi	r24, 0x3F	; 63
 22c:	9f e1       	ldi	r25, 0x1F	; 31
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <Lcd4_Clear+0xa>
 232:	00 c0       	rjmp	.+0      	; 0x234 <Lcd4_Clear+0x10>
 234:	00 00       	nop
 236:	08 95       	ret

00000238 <Lcd4_Cursor>:
	_delay_ms(2);
}
void Lcd4_Cursor(uint8_t row, uint8_t column)	//Set DDRAM(cursor) address --- 0b1(ADD6:0)
{
	char temp;
	if(row == 1)
 238:	81 30       	cpi	r24, 0x01	; 1
 23a:	29 f4       	brne	.+10     	; 0x246 <Lcd4_Cursor+0xe>
	{
		temp = 0b10000000 + (column-1);
		Lcd4_Cmd(temp);
 23c:	8f e7       	ldi	r24, 0x7F	; 127
 23e:	86 0f       	add	r24, r22
 240:	0e 94 03 01 	call	0x206	; 0x206 <Lcd4_Cmd>
 244:	08 95       	ret
	}
	else if(row == 2)
 246:	82 30       	cpi	r24, 0x02	; 2
 248:	21 f4       	brne	.+8      	; 0x252 <Lcd4_Cursor+0x1a>
	{
		temp = 0b11000000 + (column-1);
		Lcd4_Cmd(temp);
 24a:	8f eb       	ldi	r24, 0xBF	; 191
 24c:	86 0f       	add	r24, r22
 24e:	0e 94 03 01 	call	0x206	; 0x206 <Lcd4_Cmd>
 252:	08 95       	ret

00000254 <Lcd4_Ini>:
	}
}
void Lcd4_Ini(void)								//Initialize LCD
{
	LCD_DDR = 0xFF;
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	81 bb       	out	0x11, r24	; 17
 258:	2f ef       	ldi	r18, 0xFF	; 255
 25a:	89 ef       	ldi	r24, 0xF9	; 249
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	21 50       	subi	r18, 0x01	; 1
 260:	80 40       	sbci	r24, 0x00	; 0
 262:	90 40       	sbci	r25, 0x00	; 0
 264:	e1 f7       	brne	.-8      	; 0x25e <Lcd4_Ini+0xa>
 266:	00 c0       	rjmp	.+0      	; 0x268 <Lcd4_Ini+0x14>
 268:	00 00       	nop
	//----------Reset process from data sheet----------//
	_delay_ms(20);	//Wait for more than 15ms after VCC=4.5V
	Lcd4_Cmd(0x03);
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	0e 94 03 01 	call	0x206	; 0x206 <Lcd4_Cmd>
 270:	8f e1       	ldi	r24, 0x1F	; 31
 272:	9e e4       	ldi	r25, 0x4E	; 78
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <Lcd4_Ini+0x20>
 278:	00 c0       	rjmp	.+0      	; 0x27a <Lcd4_Ini+0x26>
 27a:	00 00       	nop
	_delay_ms(5);	//Wait for more than 4.1ms
	Lcd4_Cmd(0x03);
 27c:	83 e0       	ldi	r24, 0x03	; 3
 27e:	0e 94 03 01 	call	0x206	; 0x206 <Lcd4_Cmd>
 282:	8f e9       	ldi	r24, 0x9F	; 159
 284:	9f e0       	ldi	r25, 0x0F	; 15
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <Lcd4_Ini+0x32>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <Lcd4_Ini+0x38>
 28c:	00 00       	nop
	_delay_ms(1);	//Wait for more than 100us
	Lcd4_Cmd(0x03);
 28e:	83 e0       	ldi	r24, 0x03	; 3
 290:	0e 94 03 01 	call	0x206	; 0x206 <Lcd4_Cmd>
	//--------------------//
	Lcd4_Cmd(0x02);	//Function set: 4bit
 294:	82 e0       	ldi	r24, 0x02	; 2
 296:	0e 94 03 01 	call	0x206	; 0x206 <Lcd4_Cmd>
	Lcd4_Cmd(0x28);	//Function set: 4bit, 2 lines, 5x8 font		---	0b001DNF** (D:data length,N:no. of line,F:font)
 29a:	88 e2       	ldi	r24, 0x28	; 40
 29c:	0e 94 03 01 	call	0x206	; 0x206 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C); //Display control: display ON	--- 0b00001DCB (D:display,C:cursor,B:blinking)
 2a0:	8c e0       	ldi	r24, 0x0C	; 12
 2a2:	0e 94 03 01 	call	0x206	; 0x206 <Lcd4_Cmd>
	Lcd4_Cmd(0x06); //Entry mode set: increment, no accompany	--- 0b000001IS (I:increment/decrement,S:acc. display shift)
 2a6:	86 e0       	ldi	r24, 0x06	; 6
 2a8:	0e 94 03 01 	call	0x206	; 0x206 <Lcd4_Cmd>
 2ac:	08 95       	ret

000002ae <Lcd4_SetChar>:
}
void Lcd4_SetChar(char character)				//Send a single character
{
 2ae:	cf 93       	push	r28
 2b0:	c8 2f       	mov	r28, r24
	Lcd4_Write_Data();
 2b2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Lcd4_Write_Data>
	
	Lcd4_Execute(character>>4); //Data transfer
 2b6:	8c 2f       	mov	r24, r28
 2b8:	82 95       	swap	r24
 2ba:	8f 70       	andi	r24, 0x0F	; 15
 2bc:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Lcd4_Execute>
	Lcd4_Execute(character&0x0F);
 2c0:	8c 2f       	mov	r24, r28
 2c2:	8f 70       	andi	r24, 0x0F	; 15
 2c4:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Lcd4_Execute>
}
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <Lcd4_SetString>:
void Lcd4_SetString(char *pStr)					//Send a string
{
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	ec 01       	movw	r28, r24
	while(*pStr>0) //Whenever pointer gets to the end, *pStr = 0
 2d2:	88 81       	ld	r24, Y
 2d4:	88 23       	and	r24, r24
 2d6:	31 f0       	breq	.+12     	; 0x2e4 <Lcd4_SetString+0x18>
 2d8:	21 96       	adiw	r28, 0x01	; 1
	Lcd4_SetChar(*pStr++); //Send individual char and increase pointer address
 2da:	0e 94 57 01 	call	0x2ae	; 0x2ae <Lcd4_SetChar>
	Lcd4_Execute(character>>4); //Data transfer
	Lcd4_Execute(character&0x0F);
}
void Lcd4_SetString(char *pStr)					//Send a string
{
	while(*pStr>0) //Whenever pointer gets to the end, *pStr = 0
 2de:	89 91       	ld	r24, Y+
 2e0:	81 11       	cpse	r24, r1
 2e2:	fb cf       	rjmp	.-10     	; 0x2da <Lcd4_SetString+0xe>
	Lcd4_SetChar(*pStr++); //Send individual char and increase pointer address
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <_exit>:
 2ea:	f8 94       	cli

000002ec <__stop_program>:
 2ec:	ff cf       	rjmp	.-2      	; 0x2ec <__stop_program>
